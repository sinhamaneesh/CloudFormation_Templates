---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: S3 bucket, a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'S3 Parameters'
      Parameters:
      - BucketName
      - Access
      - Versioning
      - NoncurrentVersionExpirationInDays
      - Encryption
Parameters:
  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''
  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead]
  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  Encryption:
    Description: 'Enable server side encryption using KMS CMK key.'
    Type: String
    Default: false
    AllowedValues: [true, false]
Conditions:
  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasEncryption: !Equals [!Ref Encryption, true]
Resources:
  Key:
    Condition: HasEncryption
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement: !If
        - HasPublicReadAccess
        - - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
        - - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
  KeyAlias:
    Condition: HasEncryption
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}'
      TargetKeyId: !Ref Key
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
      VersioningConfiguration:
        Status: !If [HasVersioning, Enabled, Suspended]
      BucketEncryption: !If [HasEncryption, {ServerSideEncryptionConfiguration: [{ServerSideEncryptionByDefault: {KMSMasterKeyID: !Ref Key, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']
  BucketPolicy:
    Condition: HasPublicReadAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Principal: '*'
          Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/s3'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref Bucket
